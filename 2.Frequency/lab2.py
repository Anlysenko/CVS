# -*- coding: utf-8 -*-
"""Lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qxodeVLkqLePyeADBkMRELJ9mn1KQar7

#Downloading data from Google Drive and importing libs
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')
# %cd /content/drive/'My Drive'/CV/Lab2/
!ls

import cv2
import numpy as np
import matplotlib.pyplot as plt
from scipy import signal
import dftfilter

"""#LP

LP Ideal
"""

pic1_orig = cv2.imread('Pic1.jpg',0)
image1_np=np.array(pic1_orig)
PQ = dftfilter.paddedsize(image1_np)
H = dftfilter.lp_filter('ideal', (PQ[0],PQ[1]), 80)
g = dftfilter.filter(image1_np, H)

##magnitude spectrum for the original image
f1 = np.fft.fft2(image1_np)
fshift1 = np.fft.fftshift(f1)
orig_magnitude_spectrum = np.log(np.abs(fshift1))

##magnitude spectrum for filtered image
f2 = np.fft.fft2(g)
fshift2 = np.fft.fftshift(f2)
g_magnitude_spectrum = np.log(np.abs(fshift2))

plt.figure(figsize = (10,10))
plt.subplot(2,2,1), plt.xticks([]), plt.yticks([]), plt.imshow(image1_np, cmap='gray')
plt.subplot(2,2,2), plt.xticks([]), plt.yticks([]), plt.imshow(g, cmap='gray')
plt.subplot(2,2,3), plt.xticks([]), plt.yticks([]), plt.imshow(orig_magnitude_spectrum, cmap='gray')
plt.subplot(2,2,4), plt.xticks([]), plt.yticks([]), plt.imshow(g_magnitude_spectrum, cmap='gray')

"""LP Gaussian"""

pic1_orig = cv2.imread('Pic1.jpg',0)
image1_np=np.array(pic1_orig)
PQ = dftfilter.paddedsize(image1_np)
H = dftfilter.lp_filter('gaussian', (PQ[0],PQ[1]), 50)
g = dftfilter.filter(image1_np, H)

##magnitude spectrum for the original image
f1 = np.fft.fft2(image1_np)
fshift1 = np.fft.fftshift(f1)
orig_magnitude_spectrum = np.log(np.abs(fshift1))

##magnitude spectrum for filtered image
f2 = np.fft.fft2(g)
fshift2 = np.fft.fftshift(f2)
g_magnitude_spectrum = np.log(np.abs(fshift2))

plt.figure(figsize = (10,10))
plt.subplot(2,2,1), plt.xticks([]), plt.yticks([]), plt.imshow(image1_np, cmap='gray')
plt.subplot(2,2,2), plt.xticks([]), plt.yticks([]), plt.imshow(g, cmap='gray')
plt.subplot(2,2,3), plt.xticks([]), plt.yticks([]), plt.imshow(orig_magnitude_spectrum, cmap='gray')
plt.subplot(2,2,4), plt.xticks([]), plt.yticks([]), plt.imshow(g_magnitude_spectrum, cmap='gray')

"""LP Butterworth"""

pic1_orig = cv2.imread('Pic1.jpg',0)
image1_np=np.array(pic1_orig)
PQ = dftfilter.paddedsize(image1_np)
H = dftfilter.lp_filter('btw', (PQ[0],PQ[1]), 50)
g = dftfilter.filter(image1_np, H)

##magnitude spectrum for the original image
f1 = np.fft.fft2(image1_np)
fshift1 = np.fft.fftshift(f1)
orig_magnitude_spectrum = np.log(np.abs(fshift1))

##magnitude spectrum for filtered image
f2 = np.fft.fft2(g)
fshift2 = np.fft.fftshift(f2)
g_magnitude_spectrum = np.log(np.abs(fshift2))

plt.figure(figsize = (10,10))
plt.subplot(2,2,1), plt.xticks([]), plt.yticks([]), plt.imshow(image1_np, cmap='gray')
plt.subplot(2,2,2), plt.xticks([]), plt.yticks([]), plt.imshow(g, cmap='gray')
plt.subplot(2,2,3), plt.xticks([]), plt.yticks([]), plt.imshow(orig_magnitude_spectrum, cmap='gray')
plt.subplot(2,2,4), plt.xticks([]), plt.yticks([]), plt.imshow(g_magnitude_spectrum, cmap='gray')

"""#HP

HP Ideal
"""

pic1_orig = cv2.imread('Pic1.jpg',0)
image1_np=np.array(pic1_orig)
PQ = dftfilter.paddedsize(image1_np)
H = dftfilter.hp_filter('ideal', (PQ[0],PQ[1]), 50)
g = dftfilter.filter(image1_np, H)

##magnitude spectrum for the original image
f1 = np.fft.fft2(image1_np)
fshift1 = np.fft.fftshift(f1)
orig_magnitude_spectrum = np.log(np.abs(fshift1))

##magnitude spectrum for filtered image
f2 = np.fft.fft2(g)
fshift2 = np.fft.fftshift(f2)
g_magnitude_spectrum = np.log(np.abs(fshift2))

plt.figure(figsize = (10,10))
plt.subplot(2,2,1), plt.xticks([]), plt.yticks([]), plt.imshow(image1_np, cmap='gray')
plt.subplot(2,2,2), plt.xticks([]), plt.yticks([]), plt.imshow(g, cmap='gray')
plt.subplot(2,2,3), plt.xticks([]), plt.yticks([]), plt.imshow(orig_magnitude_spectrum, cmap='gray')
plt.subplot(2,2,4), plt.xticks([]), plt.yticks([]), plt.imshow(g_magnitude_spectrum, cmap='gray')

"""HP Gaussian"""

pic1_orig = cv2.imread('Pic1.jpg',0)
image1_np=np.array(pic1_orig)
PQ = dftfilter.paddedsize(image1_np)
H = dftfilter.hp_filter('gaussian', (PQ[0],PQ[1]), 50)
g = dftfilter.filter(image1_np, H)

##magnitude spectrum for the original image
f1 = np.fft.fft2(image1_np)
fshift1 = np.fft.fftshift(f1)
orig_magnitude_spectrum = np.log(np.abs(fshift1))

##magnitude spectrum for filtered image
f2 = np.fft.fft2(g)
fshift2 = np.fft.fftshift(f2)
g_magnitude_spectrum = np.log(np.abs(fshift2))

plt.figure(figsize = (10,10))
plt.subplot(2,2,1), plt.xticks([]), plt.yticks([]), plt.imshow(image1_np, cmap='gray')
plt.subplot(2,2,2), plt.xticks([]), plt.yticks([]), plt.imshow(g, cmap='gray')
plt.subplot(2,2,3), plt.xticks([]), plt.yticks([]), plt.imshow(orig_magnitude_spectrum, cmap='gray')
plt.subplot(2,2,4), plt.xticks([]), plt.yticks([]), plt.imshow(g_magnitude_spectrum, cmap='gray')

"""HP Butterworth"""

pic1_orig = cv2.imread('Pic1.jpg',0)
image1_np=np.array(pic1_orig)
PQ = dftfilter.paddedsize(image1_np)
H = dftfilter.hp_filter('btw', (PQ[0],PQ[1]), 50)
g = dftfilter.filter(image1_np, H)

##magnitude spectrum for the original image
f1 = np.fft.fft2(image1_np)
fshift1 = np.fft.fftshift(f1)
orig_magnitude_spectrum = np.log(np.abs(fshift1))

##magnitude spectrum for filtered image
f2 = np.fft.fft2(g)
fshift2 = np.fft.fftshift(f2)
g_magnitude_spectrum = np.log(np.abs(fshift2))

plt.figure(figsize = (10,10))
plt.subplot(2,2,1), plt.xticks([]), plt.yticks([]), plt.imshow(image1_np, cmap='gray')
plt.subplot(2,2,2), plt.xticks([]), plt.yticks([]), plt.imshow(g, cmap='gray')
plt.subplot(2,2,3), plt.xticks([]), plt.yticks([]), plt.imshow(orig_magnitude_spectrum, cmap='gray')
plt.subplot(2,2,4), plt.xticks([]), plt.yticks([]), plt.imshow(g_magnitude_spectrum, cmap='gray')

"""HP Laplacian"""

pic1_orig = cv2.imread('Pic1.jpg',0)
image1_np=np.array(pic1_orig)
PQ = dftfilter.paddedsize(image1_np)
H = dftfilter.hp_filter('laplacian', (PQ[0],PQ[1]), 50)
g = dftfilter.filter(image1_np, H)

##magnitude spectrum for the original image
f1 = np.fft.fft2(image1_np)
fshift1 = np.fft.fftshift(f1)
orig_magnitude_spectrum = np.log(np.abs(fshift1))

##magnitude spectrum for filtered image
f2 = np.fft.fft2(g)
fshift2 = np.fft.fftshift(f2)
g_magnitude_spectrum = np.log(np.abs(fshift2))

plt.figure(figsize = (10,10))
plt.subplot(2,2,1), plt.xticks([]), plt.yticks([]), plt.imshow(image1_np, cmap='gray')
plt.subplot(2,2,2), plt.xticks([]), plt.yticks([]), plt.imshow(g, cmap='gray')
plt.subplot(2,2,3), plt.xticks([]), plt.yticks([]), plt.imshow(orig_magnitude_spectrum, cmap='gray')
plt.subplot(2,2,4), plt.xticks([]), plt.yticks([]), plt.imshow(g_magnitude_spectrum, cmap='gray')

"""#The difference between spatial and frequency filtering"""

import time
'''
h = np.array([[1, 0, -1],
               [2, 0, -2],
               [1, 0, -1]])
'''
n = 30
h = np.ones([n,n])/(n ** 2)
pic1_orig = cv2.imread('car.jpg',0)
image1_np=np.array(pic1_orig)

##magnitude spectrum for the original image
f1 = np.fft.fft2(image1_np)
fshift1 = np.fft.fftshift(f1)
orig_magnitude_spectrum = np.log(np.abs(fshift1))

##Frequency domain
PQ = dftfilter.paddedsize(image1_np)
H = dftfilter.freqz2(h, PQ[0], PQ[1]) 

tic = time.process_time()
gf = dftfilter.filter(image1_np, H)
toc = time.process_time()
print ("\n ----- Frequency domain computation time = " + str(1000*(toc - tic)) + "ms")

##magnitude spectrum for gf image
f2 = np.fft.fft2(gf)
fshift2 = np.fft.fftshift(f2)
gf_magnitude_spectrum = np.log(np.abs(fshift2))

##Spatial domain
tic = time.process_time()
gs = signal.convolve2d(image1_np, h, mode='same', boundary='fill', fillvalue=0)
toc = time.process_time()
print ("\n ----- Spatial domain computation time = " + str(1000*(toc - tic)) + "ms")

##magnitude spectrum for gs image
f3 = np.fft.fft2(gs)
fshift3 = np.fft.fftshift(f3)
gs_magnitude_spectrum = np.log(np.abs(fshift3))

##Dispaly result
plt.figure(figsize = (10,10))
plt.subplot(3,2,1), plt.xticks([]), plt.yticks([]), plt.imshow(image1_np, cmap='gray')
plt.subplot(3,2,3), plt.xticks([]), plt.yticks([]), plt.imshow(gf, cmap='gray')
plt.subplot(3,2,5), plt.xticks([]), plt.yticks([]), plt.imshow(gs, cmap='gray')
plt.subplot(3,2,2), plt.xticks([]), plt.yticks([]), plt.imshow(orig_magnitude_spectrum, cmap='gray')
plt.subplot(3,2,4), plt.xticks([]), plt.yticks([]), plt.imshow(gf_magnitude_spectrum, cmap='gray')
plt.subplot(3,2,6), plt.xticks([]), plt.yticks([]), plt.imshow(gs_magnitude_spectrum, cmap='gray')
plt.tight_layout()
##Pixels brightness
d = np.max(np.max(np.abs(gs - gf)))
print ("\n ----- Absolute brighness value = " + str(d))